{
  "name": "vault",
  "type": "provider",
  "version": "v1.1.1-3-g1079580",
  "provider": {
    "address": {
      "Type": "String",
      "Required": true,
      "Description": "URL of the root of the target Vault server."
    },
    "ca_cert_dir": {
      "Type": "String",
      "Optional": true,
      "Description": "Path to directory containing CA certificate files to validate the server's certificate.",
      "Default": {
        "Type": "string"
      }
    },
    "ca_cert_file": {
      "Type": "String",
      "Optional": true,
      "Description": "Path to a CA certificate file to validate the server's certificate.",
      "Default": {
        "Type": "string"
      }
    },
    "client_auth": {
      "Type": "List",
      "Optional": true,
      "Description": "Client authentication credentials.",
      "Elem": {
        "Type": "SchemaInfo",
        "Info": {
          "cert_file": {
            "Type": "String",
            "Required": true,
            "Description": "Path to a file containing the client certificate.",
            "Default": {
              "Type": "string"
            }
          },
          "key_file": {
            "Type": "String",
            "Required": true,
            "Description": "Path to a file containing the private key that the certificate was issued for.",
            "Default": {
              "Type": "string"
            }
          }
        }
      }
    },
    "max_lease_ttl_seconds": {
      "Type": "Int",
      "Optional": true,
      "Description": "Maximum TTL for secret leases requested by this provider",
      "Default": {
        "Type": "int",
        "Value": "1200"
      }
    },
    "skip_tls_verify": {
      "Type": "Bool",
      "Optional": true,
      "Description": "Set this to true only if the target Vault server is an insecure development instance.",
      "Default": {
        "Type": "string"
      }
    },
    "token": {
      "Type": "String",
      "Required": true,
      "Description": "Token to use to authenticate to Vault.",
      "Default": {
        "Type": "string"
      }
    }
  },
  "resources": {
    "vault_approle_auth_backend_login": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor for the token.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "client_token": {
        "Type": "String",
        "Description": "The token.",
        "Computed": true
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "How long the token is valid for.",
        "Computed": true
      },
      "lease_started": {
        "Type": "String",
        "Description": "The timestamp the lease started on, as determined by the machine running Terraform.",
        "Computed": true
      },
      "metadata": {
        "Type": "Map",
        "Description": "Metadata associated with the token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "policies": {
        "Type": "List",
        "Description": "Policies set on the token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "renewable": {
        "Type": "Bool",
        "Description": "Whether the token is renewable or not.",
        "Computed": true
      },
      "role_id": {
        "Type": "String",
        "Required": true,
        "Description": "The RoleID to log in with."
      },
      "secret_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The SecretID to log in with."
      }
    },
    "vault_approle_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "bind_secret_id": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not to require secret_id to be present when logging in using this AppRole."
      },
      "bound_cidr_list": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of CIDR blocks that can log in using the AppRole.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will never expire as long as it is renewed before the TTL each period."
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this AppRole.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The RoleID of the role. Autogenerated if not set.",
        "Computed": true
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "secret_id_num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses."
      },
      "secret_id_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds a SecretID remains valid for."
      },
      "token_max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds after which issued tokens can no longer be renewed."
      },
      "token_num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses."
      },
      "token_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default number of seconds to set as the TTL for issued tokens and at renewal time."
      }
    },
    "vault_approle_auth_backend_role_secret_id": {
      "accessor": {
        "Type": "String",
        "Description": "The unique ID used to access this SecretID.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "cidr_list": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of CIDR blocks that can log in using the SecretID.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "metadata": {
        "Type": "String",
        "Optional": true,
        "Description": "JSON-encoded secret data to write."
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "secret_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The SecretID to be managed. If not specified, Vault auto-generates one.",
        "Computed": true
      }
    },
    "vault_auth_backend": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The description of the auth backend"
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "path to mount the backend. This defaults to the type.",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the auth backend"
      }
    },
    "vault_aws_auth_backend_cert": {
      "aws_public_cert": {
        "Type": "String",
        "Required": true,
        "Description": "Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "cert_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the certificate to configure."
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "The type of document that can be verified using the certificate. Must be either \"pkcs7\" or \"identity\"."
      }
    },
    "vault_aws_auth_backend_client": {
      "access_key": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Access key with permissions to query AWS APIs."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "ec2_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS EC2 API calls."
      },
      "iam_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS IAM API calls."
      },
      "iam_server_id_header_value": {
        "Type": "String",
        "Optional": true,
        "Description": "The value to require in the X-Vault-AWS-IAM-Server-ID header as part of GetCallerIdentity requests that are used in the iam auth method."
      },
      "secret_key": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Secret key with permissions to query AWS APIs."
      },
      "sts_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS STS API calls."
      }
    },
    "vault_aws_auth_backend_identity_whitelist": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "disable_periodic_tidy": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If true, disables the periodic tidying of the identiy whitelist entries."
      },
      "safety_buffer": {
        "Type": "Int",
        "Optional": true,
        "Description": "The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage."
      }
    },
    "vault_aws_auth_backend_login": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor returned from Vault for this token.",
        "Computed": true
      },
      "auth_type": {
        "Type": "String",
        "Description": "The auth method used to generate this token.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Auth Backend to read the token from."
      },
      "client_token": {
        "Type": "String",
        "Description": "The token returned by Vault.",
        "Computed": true
      },
      "iam_http_request_method": {
        "Type": "String",
        "Optional": true,
        "Description": "The HTTP method used in the signed request."
      },
      "iam_request_body": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded body of the signed request."
      },
      "iam_request_headers": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers."
      },
      "iam_request_url": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded HTTP URL used in the signed request."
      },
      "identity": {
        "Type": "String",
        "Optional": true,
        "Description": "Base64-encoded EC2 instance identity document to authenticate with."
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "metadata": {
        "Type": "Map",
        "Description": "The metadata reported by the Vault server.",
        "Computed": true,
        "Elem": {
          "Value": "String"
        }
      },
      "nonce": {
        "Type": "String",
        "Optional": true,
        "Description": "The nonce to be used for subsequent login requests.",
        "Computed": true
      },
      "pkcs7": {
        "Type": "String",
        "Optional": true,
        "Description": "PKCS7 signature of the identity document to authenticate with, with all newline characters removed."
      },
      "policies": {
        "Type": "List",
        "Description": "The policies assigned to this token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "role": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Auth Role to read the token from.",
        "Computed": true
      },
      "signature": {
        "Type": "String",
        "Optional": true,
        "Description": "Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with."
      }
    },
    "vault_aws_auth_backend_role": {
      "allow_instance_migration": {
        "Type": "Bool",
        "Optional": true,
        "Description": "When true, allows migration of the underlying instance where the client resides. Use with caution.",
        "Computed": true
      },
      "auth_type": {
        "Type": "String",
        "Optional": true,
        "Description": "The auth type permitted for this role."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "bound_account_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances with this account ID in their identity document will be permitted to log in."
      },
      "bound_ami_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances using this AMI ID will be permitted to log in."
      },
      "bound_iam_instance_profile_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in."
      },
      "bound_iam_principal_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "The IAM principal that must be authenticated using the iam auth method."
      },
      "bound_iam_role_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances that match this IAM role ARN will be permitted to log in."
      },
      "bound_region": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances in this region will be permitted to log in."
      },
      "bound_subnet_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with this subnet ID will be permitted to log in."
      },
      "bound_vpc_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with this VPC ID will be permitted to log in."
      },
      "disallow_reauthentication": {
        "Type": "Bool",
        "Optional": true,
        "Description": "When true, only allows a single token to be granted per instance ID."
      },
      "inferred_aws_region": {
        "Type": "String",
        "Optional": true,
        "Description": "The region to search for the inferred entities in."
      },
      "inferred_entity_type": {
        "Type": "String",
        "Optional": true,
        "Description": "The type of inferencing Vault should do."
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued using this role."
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "resolve_aws_unique_ids": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.",
        "Computed": true
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "role_tag": {
        "Type": "String",
        "Optional": true,
        "Description": "The key of the tag on EC2 instance to use for role tags."
      },
      "ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The TTL period of tokens issued using this role, provided as the number of minutes."
      }
    },
    "vault_aws_auth_backend_role_tag": {
      "allow_instance_migration": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Allows migration of the underlying instance where the client resides."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS auth backend to read tags from."
      },
      "disallow_reauthentication": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Only allow a single token to be granted per instance ID."
      },
      "instance_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID."
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued using this role."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be associated with the tag.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "tag_key": {
        "Type": "String",
        "Computed": true
      },
      "tag_value": {
        "Type": "String",
        "Computed": true
      }
    },
    "vault_aws_auth_backend_sts_role": {
      "account_id": {
        "Type": "String",
        "Required": true,
        "Description": "AWS account ID to be associated with STS role."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "sts_role": {
        "Type": "String",
        "Required": true,
        "Description": "AWS ARN for STS role to be assumed when interacting with the account specified."
      }
    },
    "vault_aws_secret_backend": {
      "access_key": {
        "Type": "String",
        "Required": true,
        "Description": "The AWS Access Key ID to use when generating new credentials."
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for secrets in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount for the backend."
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for secrets in seconds",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "Path to mount the backend at."
      },
      "region": {
        "Type": "String",
        "Optional": true,
        "Description": "The AWS region to make API calls against. Defaults to us-east-1.",
        "Computed": true
      },
      "secret_key": {
        "Type": "String",
        "Required": true,
        "Description": "The AWS Secret Access Key to use when generating new credentials."
      }
    },
    "vault_aws_secret_backend_role": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "The path of the AWS Secret Backend the role belongs to."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name for the role."
      },
      "policy": {
        "Type": "String",
        "Optional": true,
        "Description": "IAM policy the role should use in JSON format.",
        "ConflictsWith": [
          "policy_arn"
        ]
      },
      "policy_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "ARN for an existing IAM policy the role should use.",
        "ConflictsWith": [
          "policy"
        ]
      }
    },
    "vault_database_secret_backend_connection": {
      "allowed_roles": {
        "Type": "List",
        "Optional": true,
        "Description": "A list of roles that are allowed to use this connection.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name of the Vault mount to configure."
      },
      "cassandra": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the cassandra-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connect_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "The number of seconds to use as a connection timeout."
            },
            "hosts": {
              "Type": "List",
              "Optional": true,
              "Description": "Cassandra hosts to connect to.",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "insecure_tls": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Whether to skip verification of the server certificate when using TLS."
            },
            "password": {
              "Type": "String",
              "Optional": true,
              "Description": "The password to use when authenticating with Cassandra."
            },
            "pem_bundle": {
              "Type": "String",
              "Optional": true,
              "Description": "Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate."
            },
            "pem_json": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate."
            },
            "port": {
              "Type": "Int",
              "Optional": true,
              "Description": "The transport port to use to connect to Cassandra."
            },
            "protocol_version": {
              "Type": "Int",
              "Optional": true,
              "Description": "The CQL protocol version to use."
            },
            "tls": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Whether to use TLS when connecting to Cassandra."
            },
            "username": {
              "Type": "String",
              "Optional": true,
              "Description": "The username to use when authenticating with Cassandra."
            }
          }
        }
      },
      "hana": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the hana-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "mongodb",
          "mssql",
          "mysql",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mongodb": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mongodb-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mssql",
          "mysql",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            }
          }
        }
      },
      "mssql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mssql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mysql",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mysql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mysql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the database connection."
      },
      "oracle": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the oracle-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "postgresql"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "postgresql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the postgresql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "verify_connection": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Specifies if the connection is verified during initial configuration."
      }
    },
    "vault_database_secret_backend_role": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "The path of the Database Secret Backend the role belongs to."
      },
      "creation_statements": {
        "Type": "String",
        "Required": true,
        "Description": "Database statements to execute to create and configure a user."
      },
      "db_name": {
        "Type": "String",
        "Required": true,
        "Description": "Database connection to use for this role."
      },
      "default_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default TTL for leases associated with this role, in seconds."
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum TTL for leases associated with this role, in seconds."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name for the role."
      },
      "renew_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to renew a user."
      },
      "revocation_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to revoke a user."
      },
      "rollback_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to rollback a create operation in the event of an error."
      }
    },
    "vault_generic_secret": {
      "allow_read": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Attempt to read the token from Vault if true; if false, drift won't be detected.",
        "Deprecated": "Please use disable_read instead."
      },
      "data_json": {
        "Type": "String",
        "Required": true,
        "Description": "JSON-encoded secret data to write."
      },
      "disable_read": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Don't attempt to read the token from Vault if true; drift won't be detected."
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Full path where the generic secret will be written."
      }
    },
    "vault_mount": {
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for tokens and secrets in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount"
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for tokens and secrets in seconds",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Where the secret backend will be mounted"
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Type of the backend, such as 'aws'"
      }
    },
    "vault_okta_auth_backend": {
      "base_url": {
        "Type": "String",
        "Optional": true,
        "Description": "The Okta url. Examples: oktapreview.com, okta.com (default)"
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The description of the auth backend"
      },
      "group": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "group_name": {
              "Type": "String",
              "Required": true,
              "Description": "Name of the Okta group"
            },
            "policies": {
              "Type": "Set",
              "Required": true,
              "Description": "Policies to associate with this group",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "Maximum duration after which authentication will be expired"
      },
      "organization": {
        "Type": "String",
        "Required": true,
        "Description": "The Okta organization. This will be the first part of the url https://XXX.okta.com."
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "path to mount the backend"
      },
      "token": {
        "Type": "String",
        "Optional": true,
        "Description": "The Okta API token. This is required to query Okta for user group membership. If this is not supplied only locally configured groups will be enabled."
      },
      "ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "Duration after which authentication will be expired"
      },
      "user": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "groups": {
              "Type": "Set",
              "Required": true,
              "Description": "Groups within the Okta auth backend to associate with this user",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "policies": {
              "Type": "Set",
              "Optional": true,
              "Description": "Policies to associate with this user",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "username": {
              "Type": "String",
              "Required": true,
              "Description": "Name of the user within Okta"
            }
          }
        }
      }
    },
    "vault_okta_auth_backend_group": {
      "group_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the Okta group"
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Path to the Okta auth backend"
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to associate with this group",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "vault_okta_auth_backend_user": {
      "groups": {
        "Type": "Set",
        "Optional": true,
        "Description": "Groups within the Okta auth backend to associate with this user",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Path to the Okta auth backend"
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to associate with this user",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "username": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the user within Okta"
      }
    },
    "vault_policy": {
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the policy"
      },
      "policy": {
        "Type": "String",
        "Required": true,
        "Description": "The policy document"
      }
    }
  },
  "data-sources": {
    "vault_approle_auth_backend_role_id": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "role_id": {
        "Type": "String",
        "Description": "The RoleID of the role.",
        "Computed": true
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      }
    },
    "vault_aws_access_credentials": {
      "access_key": {
        "Type": "String",
        "Description": "AWS access key ID read from Vault.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "AWS Secret Backend to read credentials from."
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_id": {
        "Type": "String",
        "Description": "Lease identifier assigned by vault.",
        "Computed": true
      },
      "lease_renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "AWS Secret Role to read credentials from."
      },
      "secret_key": {
        "Type": "String",
        "Description": "AWS secret key read from Vault.",
        "Computed": true
      },
      "security_token": {
        "Type": "String",
        "Description": "AWS security token read from Vault. (Only returned if type is 'sts'.)",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "Type of credentials to read. Must be either 'creds' for Access Key and Secret Key, or 'sts' for STS."
      }
    },
    "vault_generic_secret": {
      "data": {
        "Type": "Map",
        "Description": "Map of strings read from Vault.",
        "Computed": true
      },
      "data_json": {
        "Type": "String",
        "Description": "JSON-encoded secret data read from Vault.",
        "Computed": true
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_id": {
        "Type": "String",
        "Description": "Lease identifier assigned by vault.",
        "Computed": true
      },
      "lease_renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Full path from which a secret will be read."
      }
    }
  }
}