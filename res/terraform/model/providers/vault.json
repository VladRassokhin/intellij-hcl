{
  "name": "vault",
  "type": "provider",
  "version": "v1.4.1-4-g91a9af5",
  "provider": {
    "address": {
      "Type": "String",
      "Required": true,
      "Description": "URL of the root of the target Vault server."
    },
    "ca_cert_dir": {
      "Type": "String",
      "Optional": true,
      "Description": "Path to directory containing CA certificate files to validate the server's certificate.",
      "Default": {
        "Type": "string"
      }
    },
    "ca_cert_file": {
      "Type": "String",
      "Optional": true,
      "Description": "Path to a CA certificate file to validate the server's certificate.",
      "Default": {
        "Type": "string"
      }
    },
    "client_auth": {
      "Type": "List",
      "Optional": true,
      "Description": "Client authentication credentials.",
      "Elem": {
        "Type": "SchemaInfo",
        "Info": {
          "cert_file": {
            "Type": "String",
            "Required": true,
            "Description": "Path to a file containing the client certificate.",
            "Default": {
              "Type": "string"
            }
          },
          "key_file": {
            "Type": "String",
            "Required": true,
            "Description": "Path to a file containing the private key that the certificate was issued for.",
            "Default": {
              "Type": "string"
            }
          }
        }
      }
    },
    "max_lease_ttl_seconds": {
      "Type": "Int",
      "Optional": true,
      "Description": "Maximum TTL for secret leases requested by this provider",
      "Default": {
        "Type": "int",
        "Value": "1200"
      }
    },
    "skip_tls_verify": {
      "Type": "Bool",
      "Optional": true,
      "Description": "Set this to true only if the target Vault server is an insecure development instance.",
      "Default": {
        "Type": "string"
      }
    },
    "token": {
      "Type": "String",
      "Required": true,
      "Description": "Token to use to authenticate to Vault.",
      "Default": {
        "Type": "string"
      }
    }
  },
  "resources": {
    "vault_approle_auth_backend_login": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor for the token.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "client_token": {
        "Type": "String",
        "Description": "The token.",
        "Computed": true
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "How long the token is valid for.",
        "Computed": true
      },
      "lease_started": {
        "Type": "String",
        "Description": "The timestamp the lease started on, as determined by the machine running Terraform.",
        "Computed": true
      },
      "metadata": {
        "Type": "Map",
        "Description": "Metadata associated with the token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "policies": {
        "Type": "List",
        "Description": "Policies set on the token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "renewable": {
        "Type": "Bool",
        "Description": "Whether the token is renewable or not.",
        "Computed": true
      },
      "role_id": {
        "Type": "String",
        "Required": true,
        "Description": "The RoleID to log in with."
      },
      "secret_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The SecretID to log in with."
      }
    },
    "vault_approle_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "bind_secret_id": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not to require secret_id to be present when logging in using this AppRole."
      },
      "bound_cidr_list": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of CIDR blocks that can log in using the AppRole.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will never expire as long as it is renewed before the TTL each period."
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this AppRole.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The RoleID of the role. Autogenerated if not set.",
        "Computed": true
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "secret_id_num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses."
      },
      "secret_id_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds a SecretID remains valid for."
      },
      "token_max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds after which issued tokens can no longer be renewed."
      },
      "token_num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses."
      },
      "token_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default number of seconds to set as the TTL for issued tokens and at renewal time."
      }
    },
    "vault_approle_auth_backend_role_secret_id": {
      "accessor": {
        "Type": "String",
        "Description": "The unique ID used to access this SecretID.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "cidr_list": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of CIDR blocks that can log in using the SecretID.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "metadata": {
        "Type": "String",
        "Optional": true,
        "Description": "JSON-encoded secret data to write."
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "secret_id": {
        "Type": "String",
        "Optional": true,
        "Description": "The SecretID to be managed. If not specified, Vault auto-generates one.",
        "Computed": true
      }
    },
    "vault_audit": {
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the audit device"
      },
      "options": {
        "Type": "Map",
        "Required": true,
        "Description": "Configuration options to pass to the audit device itself",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "Path in which to enable the audit device",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Type of the audit device, such as 'file'"
      }
    },
    "vault_auth_backend": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor of the auth backend",
        "Computed": true
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The description of the auth backend"
      },
      "listing_visibility": {
        "Type": "String",
        "Optional": true,
        "Description": "Speficies whether to show this mount in the UI-specific listing endpoint"
      },
      "local": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Specifies if the auth method is local only"
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration in seconds",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "path to mount the backend. This defaults to the type.",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the auth backend"
      }
    },
    "vault_aws_auth_backend_cert": {
      "aws_public_cert": {
        "Type": "String",
        "Required": true,
        "Description": "Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "cert_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the certificate to configure."
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "The type of document that can be verified using the certificate. Must be either \"pkcs7\" or \"identity\"."
      }
    },
    "vault_aws_auth_backend_client": {
      "access_key": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Access key with permissions to query AWS APIs."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "ec2_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS EC2 API calls."
      },
      "iam_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS IAM API calls."
      },
      "iam_server_id_header_value": {
        "Type": "String",
        "Optional": true,
        "Description": "The value to require in the X-Vault-AWS-IAM-Server-ID header as part of GetCallerIdentity requests that are used in the iam auth method."
      },
      "secret_key": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Secret key with permissions to query AWS APIs."
      },
      "sts_endpoint": {
        "Type": "String",
        "Optional": true,
        "Description": "URL to override the default generated endpoint for making AWS STS API calls."
      }
    },
    "vault_aws_auth_backend_identity_whitelist": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "disable_periodic_tidy": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If true, disables the periodic tidying of the identiy whitelist entries."
      },
      "safety_buffer": {
        "Type": "Int",
        "Optional": true,
        "Description": "The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage."
      }
    },
    "vault_aws_auth_backend_login": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor returned from Vault for this token.",
        "Computed": true
      },
      "auth_type": {
        "Type": "String",
        "Description": "The auth method used to generate this token.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Auth Backend to read the token from."
      },
      "client_token": {
        "Type": "String",
        "Description": "The token returned by Vault.",
        "Computed": true
      },
      "iam_http_request_method": {
        "Type": "String",
        "Optional": true,
        "Description": "The HTTP method used in the signed request."
      },
      "iam_request_body": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded body of the signed request."
      },
      "iam_request_headers": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers."
      },
      "iam_request_url": {
        "Type": "String",
        "Optional": true,
        "Description": "The Base64-encoded HTTP URL used in the signed request."
      },
      "identity": {
        "Type": "String",
        "Optional": true,
        "Description": "Base64-encoded EC2 instance identity document to authenticate with."
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "metadata": {
        "Type": "Map",
        "Description": "The metadata reported by the Vault server.",
        "Computed": true,
        "Elem": {
          "Value": "String"
        }
      },
      "nonce": {
        "Type": "String",
        "Optional": true,
        "Description": "The nonce to be used for subsequent login requests.",
        "Computed": true
      },
      "pkcs7": {
        "Type": "String",
        "Optional": true,
        "Description": "PKCS7 signature of the identity document to authenticate with, with all newline characters removed."
      },
      "policies": {
        "Type": "List",
        "Description": "The policies assigned to this token.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "role": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS Auth Role to read the token from.",
        "Computed": true
      },
      "signature": {
        "Type": "String",
        "Optional": true,
        "Description": "Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with."
      }
    },
    "vault_aws_auth_backend_role": {
      "allow_instance_migration": {
        "Type": "Bool",
        "Optional": true,
        "Description": "When true, allows migration of the underlying instance where the client resides. Use with caution."
      },
      "auth_type": {
        "Type": "String",
        "Optional": true,
        "Description": "The auth type permitted for this role."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "bound_account_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances with this account ID in their identity document will be permitted to log in.",
        "ConflictsWith": [
          "bound_account_ids"
        ],
        "Deprecated": "\"bound_account_id\" is deprecated, please use \"bound_account_ids\" as a list."
      },
      "bound_account_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances with this account ID in their identity document will be permitted to log in.",
        "ConflictsWith": [
          "bound_account_id"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_ami_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances using this AMI ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_ami_ids"
        ],
        "Deprecated": "\"bound_ami_id\" is deprecated, please use \"bound_ami_ids\" as a list."
      },
      "bound_ami_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances using this AMI ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_ami_id"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_ec2_instance_id": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances that match this instance ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_ec2_instance_ids"
        ],
        "Deprecated": "\"bound_ec2_instance_id\" is deprecated, please use \"bound_ec2_instance_ids\".",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_ec2_instance_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances that match this instance ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_ec2_instance_id"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_iam_instance_profile_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.",
        "ConflictsWith": [
          "bound_iam_instance_profile_arns"
        ],
        "Deprecated": "\"bound_iam_instance_profile_arn\" is deprecated, please use \"bound_iam_instance_profile_arns\" as a list."
      },
      "bound_iam_instance_profile_arns": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.",
        "ConflictsWith": [
          "bound_iam_instance_profile_arn"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_iam_principal_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "The IAM principal that must be authenticated using the iam auth method.",
        "ConflictsWith": [
          "bound_iam_principal_arns"
        ],
        "Deprecated": "\"bound_iam_principal_arn\" is deprecated, please use \"bound_iam_principal_arns\" as a list."
      },
      "bound_iam_principal_arns": {
        "Type": "List",
        "Optional": true,
        "Description": "The IAM principal that must be authenticated using the iam auth method.",
        "ConflictsWith": [
          "bound_iam_principal_arn"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_iam_role_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances that match this IAM role ARN will be permitted to log in.",
        "ConflictsWith": [
          "bound_iam_role_arns"
        ],
        "Deprecated": "\"bound_iam_role_arn\" is deprecated, please use \"bound_iam_role_arns\" as a list."
      },
      "bound_iam_role_arns": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances that match this IAM role ARN will be permitted to log in.",
        "ConflictsWith": [
          "bound_iam_role_arn"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_region": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances in this region will be permitted to log in.",
        "ConflictsWith": [
          "bound_regions"
        ],
        "Deprecated": "\"bound_region\" is deprecated, please use \"bound_regions\" as a list."
      },
      "bound_regions": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances in this region will be permitted to log in.",
        "ConflictsWith": [
          "bound_region"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_subnet_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with this subnet ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_subnet_ids"
        ],
        "Deprecated": "\"bound_subnet_id\" is deprecated, please use \"bound_subnet_ids\" as a list."
      },
      "bound_subnet_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances associated with this subnet ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_subnet_id"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_vpc_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Only EC2 instances associated with this VPC ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_vpc_ids"
        ],
        "Deprecated": "\"bound_vpc_id\" is deprecated, please use \"bound_vpc_ids\" as a list."
      },
      "bound_vpc_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Only EC2 instances associated with this VPC ID will be permitted to log in.",
        "ConflictsWith": [
          "bound_vpc_id"
        ],
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "disallow_reauthentication": {
        "Type": "Bool",
        "Optional": true,
        "Description": "When true, only allows a single token to be granted per instance ID."
      },
      "inferred_aws_region": {
        "Type": "String",
        "Optional": true,
        "Description": "The region to search for the inferred entities in."
      },
      "inferred_entity_type": {
        "Type": "String",
        "Optional": true,
        "Description": "The type of inferencing Vault should do."
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued using this role, provided as the number of seconds."
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The maximum allowed lifetime of token issued using this role. Specified as a number of seconds."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "resolve_aws_unique_ids": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had."
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "role_tag": {
        "Type": "String",
        "Optional": true,
        "Description": "The key of the tag on EC2 instance to use for role tags."
      },
      "ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The TTL period of tokens issued using this role, provided as the number of seconds."
      }
    },
    "vault_aws_auth_backend_role_tag": {
      "allow_instance_migration": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Allows migration of the underlying instance where the client resides."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "AWS auth backend to read tags from."
      },
      "disallow_reauthentication": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Only allow a single token to be granted per instance ID."
      },
      "instance_id": {
        "Type": "String",
        "Optional": true,
        "Description": "Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID."
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued using this role."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be associated with the tag.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "tag_key": {
        "Type": "String",
        "Computed": true
      },
      "tag_value": {
        "Type": "String",
        "Computed": true
      }
    },
    "vault_aws_auth_backend_roletag_blacklist": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "disable_periodic_tidy": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If true, disables the periodic tidying of the roletag blacklist entries."
      },
      "safety_buffer": {
        "Type": "Int",
        "Optional": true,
        "Description": "The amount of extra time that must have passed beyond the roletag expiration, before it's removed from backend storage."
      }
    },
    "vault_aws_auth_backend_sts_role": {
      "account_id": {
        "Type": "String",
        "Required": true,
        "Description": "AWS account ID to be associated with STS role."
      },
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "sts_role": {
        "Type": "String",
        "Required": true,
        "Description": "AWS ARN for STS role to be assumed when interacting with the account specified."
      }
    },
    "vault_aws_secret_backend": {
      "access_key": {
        "Type": "String",
        "Required": true,
        "Description": "The AWS Access Key ID to use when generating new credentials."
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for secrets in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount for the backend."
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for secrets in seconds",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "Path to mount the backend at."
      },
      "region": {
        "Type": "String",
        "Optional": true,
        "Description": "The AWS region to make API calls against. Defaults to us-east-1.",
        "Computed": true
      },
      "secret_key": {
        "Type": "String",
        "Required": true,
        "Description": "The AWS Secret Access Key to use when generating new credentials."
      }
    },
    "vault_aws_secret_backend_role": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "The path of the AWS Secret Backend the role belongs to."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name for the role."
      },
      "policy": {
        "Type": "String",
        "Optional": true,
        "Description": "IAM policy the role should use in JSON format.",
        "ConflictsWith": [
          "policy_arn"
        ]
      },
      "policy_arn": {
        "Type": "String",
        "Optional": true,
        "Description": "ARN for an existing IAM policy the role should use.",
        "ConflictsWith": [
          "policy"
        ]
      }
    },
    "vault_cert_auth_backend_role": {
      "allowed_names": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "backend": {
        "Type": "String",
        "Optional": true
      },
      "certificate": {
        "Type": "String",
        "Required": true
      },
      "display_name": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "name": {
        "Type": "String",
        "Required": true
      },
      "period": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "required_extensions": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "ttl": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      }
    },
    "vault_consul_secret_backend": {
      "address": {
        "Type": "String",
        "Required": true,
        "Description": "Specifies the address of the Consul instance, provided as \"host:port\" like \"127.0.0.1:8500\"."
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for secrets in seconds"
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount for the backend."
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for secrets in seconds"
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the Vault Consul mount to configure"
      },
      "scheme": {
        "Type": "String",
        "Optional": true,
        "Description": "Specifies the URL scheme to use. Defaults to \"http\"."
      },
      "token": {
        "Type": "String",
        "Required": true,
        "Description": "Specifies the Consul ACL token to use. This must be a management type token."
      }
    },
    "vault_database_secret_backend_connection": {
      "allowed_roles": {
        "Type": "List",
        "Optional": true,
        "Description": "A list of roles that are allowed to use this connection.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name of the Vault mount to configure."
      },
      "cassandra": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the cassandra-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connect_timeout": {
              "Type": "Int",
              "Optional": true,
              "Description": "The number of seconds to use as a connection timeout."
            },
            "hosts": {
              "Type": "List",
              "Optional": true,
              "Description": "Cassandra hosts to connect to.",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "insecure_tls": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Whether to skip verification of the server certificate when using TLS."
            },
            "password": {
              "Type": "String",
              "Optional": true,
              "Description": "The password to use when authenticating with Cassandra."
            },
            "pem_bundle": {
              "Type": "String",
              "Optional": true,
              "Description": "Concatenated PEM blocks containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate."
            },
            "pem_json": {
              "Type": "String",
              "Optional": true,
              "Description": "Specifies JSON containing a certificate and private key; a certificate, private key, and issuing CA certificate; or just a CA certificate."
            },
            "port": {
              "Type": "Int",
              "Optional": true,
              "Description": "The transport port to use to connect to Cassandra."
            },
            "protocol_version": {
              "Type": "Int",
              "Optional": true,
              "Description": "The CQL protocol version to use."
            },
            "tls": {
              "Type": "Bool",
              "Optional": true,
              "Description": "Whether to use TLS when connecting to Cassandra."
            },
            "username": {
              "Type": "String",
              "Optional": true,
              "Description": "The username to use when authenticating with Cassandra."
            }
          }
        }
      },
      "data": {
        "Type": "Map",
        "Optional": true,
        "Description": "A map of sensitive data to pass to the endpoint. Usefule for templated connection strings."
      },
      "hana": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the hana-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mongodb": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mongodb-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            }
          }
        }
      },
      "mssql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mssql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mysql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mysql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mysql_aurora": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mysql-aurora-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mysql_legacy": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mysql-legacy-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "mysql_rds": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the mysql-rds-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the database connection."
      },
      "oracle": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the oracle-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "postgresql"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "postgresql": {
        "Type": "List",
        "Optional": true,
        "Description": "Connection parameters for the postgresql-database-plugin plugin.",
        "MaxItems": 1,
        "ConflictsWith": [
          "cassandra",
          "hana",
          "mongodb",
          "mssql",
          "mysql",
          "mysql_rds",
          "mysql_aurora",
          "mysql_legacy",
          "oracle"
        ],
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "connection_url": {
              "Type": "String",
              "Optional": true,
              "Description": "Connection string to use to connect to the database."
            },
            "max_connection_lifetime": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of seconds a connection may be reused."
            },
            "max_idle_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of idle connections to the database."
            },
            "max_open_connections": {
              "Type": "Int",
              "Optional": true,
              "Description": "Maximum number of open connections to the database."
            }
          }
        }
      },
      "verify_connection": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Specifies if the connection is verified during initial configuration."
      }
    },
    "vault_database_secret_backend_role": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "The path of the Database Secret Backend the role belongs to."
      },
      "creation_statements": {
        "Type": "String",
        "Required": true,
        "Description": "Database statements to execute to create and configure a user."
      },
      "db_name": {
        "Type": "String",
        "Required": true,
        "Description": "Database connection to use for this role."
      },
      "default_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default TTL for leases associated with this role, in seconds."
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum TTL for leases associated with this role, in seconds."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name for the role."
      },
      "renew_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to renew a user."
      },
      "revocation_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to revoke a user."
      },
      "rollback_statements": {
        "Type": "String",
        "Optional": true,
        "Description": "Database statements to execute to rollback a create operation in the event of an error."
      }
    },
    "vault_gcp_auth_backend": {
      "client_email": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "client_id": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "credentials": {
        "Type": "String",
        "Required": true
      },
      "description": {
        "Type": "String",
        "Optional": true
      },
      "path": {
        "Type": "String",
        "Optional": true
      },
      "private_key_id": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "project_id": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      }
    },
    "vault_gcp_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true
      },
      "bound_instance_groups": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_labels": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_regions": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_service_accounts": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_zones": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "period": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "project_id": {
        "Type": "String",
        "Required": true
      },
      "role": {
        "Type": "String",
        "Required": true
      },
      "ttl": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Required": true
      }
    },
    "vault_gcp_secret_backend": {
      "credentials": {
        "Type": "String",
        "Optional": true,
        "Description": "JSON-encoded credentials to use to connect to GCP"
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for secrets in seconds"
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount for the backend."
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for secrets in seconds"
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "Path to mount the backend at."
      }
    },
    "vault_generic_secret": {
      "allow_read": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Attempt to read the token from Vault if true; if false, drift won't be detected.",
        "Deprecated": "Please use disable_read instead."
      },
      "data_json": {
        "Type": "String",
        "Required": true,
        "Description": "JSON-encoded secret data to write."
      },
      "disable_read": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Don't attempt to read the token from Vault if true; drift won't be detected."
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Full path where the generic secret will be written."
      }
    },
    "vault_identity_group": {
      "id": {
        "Type": "String",
        "Description": "ID of the group.",
        "Computed": true
      },
      "member_entity_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Entity IDs to be assigned as group members.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "member_group_ids": {
        "Type": "List",
        "Optional": true,
        "Description": "Group IDs to be assigned as group members.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "metadata": {
        "Type": "Map",
        "Optional": true,
        "Description": "Metadata to be associated with the group.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the group."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be tied to the group.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "Type of the group, internal or external. Defaults to internal."
      }
    },
    "vault_identity_group_alias": {
      "canonical_id": {
        "Type": "String",
        "Required": true,
        "Description": "ID of the group to which this is an alias.uType of the group, internal or external. Defaults to internal."
      },
      "id": {
        "Type": "String",
        "Description": "ID of the group alias.",
        "Computed": true
      },
      "mount_accessor": {
        "Type": "String",
        "Required": true,
        "Description": "Mount accessor to which this alias belongs toMount accessor to which this alias belongs to."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the group alias."
      }
    },
    "vault_jwt_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "bound_audiences": {
        "Type": "Set",
        "Required": true,
        "Description": "List of aud claims to match against. Any match is sufficient.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_cidrs": {
        "Type": "Set",
        "Optional": true,
        "Description": "List of CIDRs valid as the source address for login requests. This value is also encoded into any resulting token.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_subject": {
        "Type": "String",
        "Optional": true,
        "Description": "If set, requires that the sub claim matches this value."
      },
      "groups_claim": {
        "Type": "String",
        "Optional": true,
        "Description": "The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for the Identity group aliases created due to a successful login. The claim value must be a list of strings."
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds after which issued tokens can no longer be renewed."
      },
      "num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses."
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will never expire as long as it is renewed before the TTL each period.",
        "ConflictsWith": [
          "ttl"
        ]
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default number of seconds to set as the TTL for issued tokens and at renewal time.",
        "ConflictsWith": [
          "period"
        ]
      },
      "user_claim": {
        "Type": "String",
        "Required": true,
        "Description": "The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due to a successful login."
      }
    },
    "vault_kubernetes_auth_backend_config": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the kubernetes backend to configure."
      },
      "kubernetes_ca_cert": {
        "Type": "String",
        "Optional": true,
        "Description": "PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API."
      },
      "kubernetes_host": {
        "Type": "String",
        "Required": true,
        "Description": "Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server."
      },
      "pem_keys": {
        "Type": "List",
        "Optional": true,
        "Description": "Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "token_reviewer_jwt": {
        "Type": "String",
        "Optional": true,
        "Description": "A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API."
      }
    },
    "vault_kubernetes_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the kubernetes backend to configure."
      },
      "bound_service_account_names": {
        "Type": "List",
        "Required": true,
        "Description": "List of service account names able to access this role. If set to \"*\" all names are allowed, both this and bound_service_account_namespaces can not be \"*\".",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_service_account_namespaces": {
        "Type": "List",
        "Required": true,
        "Description": "List of namespaces allowed to access this role. If set to \"*\" all namespaces are allowed, both this and bound_service_account_names can not be set to \"*\".",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued in seconds using this role."
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter."
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The TTL period of tokens issued using this role in seconds."
      }
    },
    "vault_ldap_auth_backend": {
      "accessor": {
        "Type": "String",
        "Description": "The accessor of the LDAP auth backend",
        "Computed": true
      },
      "binddn": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "bindpass": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "certificate": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "deny_null_bind": {
        "Type": "Bool",
        "Optional": true,
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "discoverdn": {
        "Type": "Bool",
        "Optional": true,
        "Computed": true
      },
      "groupattr": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "groupdn": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "groupfilter": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "insecure_tls": {
        "Type": "Bool",
        "Optional": true,
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Optional": true
      },
      "starttls": {
        "Type": "Bool",
        "Optional": true,
        "Computed": true
      },
      "tls_max_version": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "tls_min_version": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "upndomain": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "url": {
        "Type": "String",
        "Required": true
      },
      "userattr": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      },
      "userdn": {
        "Type": "String",
        "Optional": true,
        "Computed": true
      }
    },
    "vault_ldap_auth_backend_group": {
      "backend": {
        "Type": "String",
        "Optional": true
      },
      "groupname": {
        "Type": "String",
        "Required": true
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "vault_ldap_auth_backend_user": {
      "backend": {
        "Type": "String",
        "Optional": true
      },
      "groups": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "username": {
        "Type": "String",
        "Required": true
      }
    },
    "vault_mount": {
      "accessor": {
        "Type": "String",
        "Description": "Accessor of the mount",
        "Computed": true
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for tokens and secrets in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount"
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for tokens and secrets in seconds",
        "Computed": true
      },
      "options": {
        "Type": "Map",
        "Optional": true,
        "Description": "Specifies mount type specific options that are passed to the backend"
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Where the secret backend will be mounted"
      },
      "type": {
        "Type": "String",
        "Required": true,
        "Description": "Type of the backend, such as 'aws'"
      }
    },
    "vault_okta_auth_backend": {
      "base_url": {
        "Type": "String",
        "Optional": true,
        "Description": "The Okta url. Examples: oktapreview.com, okta.com (default)"
      },
      "bypass_okta_mfa": {
        "Type": "Bool",
        "Optional": true,
        "Description": "When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired."
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "The description of the auth backend"
      },
      "group": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "group_name": {
              "Type": "String",
              "Required": true,
              "Description": "Name of the Okta group"
            },
            "policies": {
              "Type": "Set",
              "Required": true,
              "Description": "Policies to associate with this group",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            }
          }
        }
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "Maximum duration after which authentication will be expired"
      },
      "organization": {
        "Type": "String",
        "Required": true,
        "Description": "The Okta organization. This will be the first part of the url https://XXX.okta.com."
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "path to mount the backend"
      },
      "token": {
        "Type": "String",
        "Optional": true,
        "Description": "The Okta API token. This is required to query Okta for user group membership. If this is not supplied only locally configured groups will be enabled."
      },
      "ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "Duration after which authentication will be expired"
      },
      "user": {
        "Type": "Set",
        "Optional": true,
        "Computed": true,
        "Elem": {
          "Type": "SchemaInfo",
          "Info": {
            "groups": {
              "Type": "Set",
              "Required": true,
              "Description": "Groups within the Okta auth backend to associate with this user",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "policies": {
              "Type": "Set",
              "Optional": true,
              "Description": "Policies to associate with this user",
              "Elem": {
                "Type": "SchemaElements",
                "ElementsType": "String"
              }
            },
            "username": {
              "Type": "String",
              "Required": true,
              "Description": "Name of the user within Okta"
            }
          }
        }
      }
    },
    "vault_okta_auth_backend_group": {
      "group_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the Okta group"
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Path to the Okta auth backend"
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to associate with this group",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "vault_okta_auth_backend_user": {
      "groups": {
        "Type": "Set",
        "Optional": true,
        "Description": "Groups within the Okta auth backend to associate with this user",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Path to the Okta auth backend"
      },
      "policies": {
        "Type": "Set",
        "Optional": true,
        "Description": "Policies to associate with this user",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "username": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the user within Okta"
      }
    },
    "vault_policy": {
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the policy"
      },
      "policy": {
        "Type": "String",
        "Required": true,
        "Description": "The policy document"
      }
    },
    "vault_rabbitmq_secret_backend": {
      "connection_uri": {
        "Type": "String",
        "Required": true,
        "Description": "Specifies the RabbitMQ connection URI."
      },
      "default_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Default lease duration for secrets in seconds",
        "Computed": true
      },
      "description": {
        "Type": "String",
        "Optional": true,
        "Description": "Human-friendly description of the mount for the backend."
      },
      "max_lease_ttl_seconds": {
        "Type": "Int",
        "Optional": true,
        "Description": "Maximum possible lease duration for secrets in seconds",
        "Computed": true
      },
      "password": {
        "Type": "String",
        "Required": true,
        "Description": "Specifies the RabbitMQ management administrator password"
      },
      "path": {
        "Type": "String",
        "Optional": true,
        "Description": "The path of the RabbitMQ Secret Backend where the connection should be configured"
      },
      "username": {
        "Type": "String",
        "Required": true,
        "Description": "Specifies the RabbitMQ management administrator username"
      },
      "verify_connection": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Specifies whether to verify connection URI, username, and password."
      }
    },
    "vault_rabbitmq_secret_backend_role": {
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "The path of the Rabbitmq Secret Backend the role belongs to."
      },
      "name": {
        "Type": "String",
        "Required": true,
        "Description": "Unique name for the role."
      },
      "tags": {
        "Type": "String",
        "Optional": true,
        "Description": "Specifies a comma-separated RabbitMQ management tags."
      },
      "vhosts": {
        "Type": "String",
        "Optional": true,
        "Description": "Specifies a map of virtual hosts to permissions."
      }
    },
    "vault_ssh_secret_backend_ca": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "The path of the SSH Secret Backend where the CA should be configured"
      },
      "generate_signing_key": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Whether Vault should generate the signing key pair internally."
      },
      "private_key": {
        "Type": "String",
        "Optional": true,
        "Description": "Private key part the SSH CA key pair; required if generate_signing_key is false.",
        "Computed": true
      },
      "public_key": {
        "Type": "String",
        "Optional": true,
        "Description": "Public key part the SSH CA key pair; required if generate_signing_key is false.",
        "Computed": true
      }
    },
    "vault_token_auth_backend_role": {
      "allowed_policies": {
        "Type": "List",
        "Optional": true,
        "Description": "List of allowed policies for given role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "disallowed_policies": {
        "Type": "List",
        "Optional": true,
        "Description": "List of disallowed policies for given role.",
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "explicit_max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "If set, the token will have an explicit max TTL set upon it.",
        "Computed": true
      },
      "max_ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued using this role.",
        "Computed": true
      },
      "orphan": {
        "Type": "Bool",
        "Optional": true,
        "Description": "If true, tokens created against this policy will be orphan tokens."
      },
      "path_suffix": {
        "Type": "String",
        "Optional": true,
        "Description": "Tokens created against this role will have the given suffix as part of their path in addition to the role name."
      },
      "period": {
        "Type": "String",
        "Optional": true,
        "Description": "The duration in which a token should be renewed. At each renewal, the token's TTL will be set to the value of this parameter.",
        "Computed": true
      },
      "renewable": {
        "Type": "Bool",
        "Optional": true,
        "Description": "Wether to disable the ability of the token to be renewed past its initial TTL."
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "ttl": {
        "Type": "String",
        "Optional": true,
        "Description": "The TTL period of tokens issued using this role, provided as the number of minutes.",
        "Computed": true
      }
    }
  },
  "data-sources": {
    "vault_approle_auth_backend_role_id": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the auth backend to configure."
      },
      "role_id": {
        "Type": "String",
        "Description": "The RoleID of the role.",
        "Computed": true
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      }
    },
    "vault_aws_access_credentials": {
      "access_key": {
        "Type": "String",
        "Description": "AWS access key ID read from Vault.",
        "Computed": true
      },
      "backend": {
        "Type": "String",
        "Required": true,
        "Description": "AWS Secret Backend to read credentials from."
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_id": {
        "Type": "String",
        "Description": "Lease identifier assigned by vault.",
        "Computed": true
      },
      "lease_renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "role": {
        "Type": "String",
        "Required": true,
        "Description": "AWS Secret Role to read credentials from."
      },
      "secret_key": {
        "Type": "String",
        "Description": "AWS secret key read from Vault.",
        "Computed": true
      },
      "security_token": {
        "Type": "String",
        "Description": "AWS security token read from Vault. (Only returned if type is 'sts'.)",
        "Computed": true
      },
      "type": {
        "Type": "String",
        "Optional": true,
        "Description": "Type of credentials to read. Must be either 'creds' for Access Key and Secret Key, or 'sts' for STS."
      }
    },
    "vault_generic_secret": {
      "data": {
        "Type": "Map",
        "Description": "Map of strings read from Vault.",
        "Computed": true
      },
      "data_json": {
        "Type": "String",
        "Description": "JSON-encoded secret data read from Vault.",
        "Computed": true
      },
      "lease_duration": {
        "Type": "Int",
        "Description": "Lease duration in seconds relative to the time in lease_start_time.",
        "Computed": true
      },
      "lease_id": {
        "Type": "String",
        "Description": "Lease identifier assigned by vault.",
        "Computed": true
      },
      "lease_renewable": {
        "Type": "Bool",
        "Description": "True if the duration of this lease can be extended through renewal.",
        "Computed": true
      },
      "lease_start_time": {
        "Type": "String",
        "Description": "Time at which the lease was read, using the clock of the system where Terraform was running",
        "Computed": true
      },
      "path": {
        "Type": "String",
        "Required": true,
        "Description": "Full path from which a secret will be read."
      },
      "version": {
        "Type": "Int",
        "Optional": true
      }
    },
    "vault_kubernetes_auth_backend_config": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the kubernetes backend to configure."
      },
      "kubernetes_ca_cert": {
        "Type": "String",
        "Optional": true,
        "Description": "PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.",
        "Computed": true
      },
      "kubernetes_host": {
        "Type": "String",
        "Optional": true,
        "Description": "Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.",
        "Computed": true
      },
      "pem_keys": {
        "Type": "List",
        "Optional": true,
        "Description": "Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      }
    },
    "vault_kubernetes_auth_backend_role": {
      "backend": {
        "Type": "String",
        "Optional": true,
        "Description": "Unique name of the kubernetes backend to configure."
      },
      "bound_service_account_names": {
        "Type": "List",
        "Description": "List of service account names able to access this role. If set to \"*\" all names are allowed, both this and bound_service_account_namespaces can not be \"*\".",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "bound_service_account_namespaces": {
        "Type": "List",
        "Description": "List of namespaces allowed to access this role. If set to \"*\" all namespaces are allowed, both this and bound_service_account_names can not be set to \"*\".",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "max_ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The maximum allowed lifetime of tokens issued in seconds using this role.",
        "Computed": true
      },
      "num_uses": {
        "Type": "Int",
        "Optional": true,
        "Description": "Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.",
        "Computed": true
      },
      "period": {
        "Type": "Int",
        "Optional": true,
        "Description": "If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this parameter.",
        "Computed": true
      },
      "policies": {
        "Type": "List",
        "Optional": true,
        "Description": "Policies to be set on tokens issued using this role.",
        "Computed": true,
        "Elem": {
          "Type": "SchemaElements",
          "ElementsType": "String"
        }
      },
      "role_name": {
        "Type": "String",
        "Required": true,
        "Description": "Name of the role."
      },
      "ttl": {
        "Type": "Int",
        "Optional": true,
        "Description": "The TTL period of tokens issued using this role in seconds.",
        "Computed": true
      }
    }
  }
}