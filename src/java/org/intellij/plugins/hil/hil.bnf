{
  elementTypeHolderClass = 'org.intellij.plugins.hil.HILElementTypes'
  tokenTypeClass = 'org.intellij.plugins.hil.HILTokenType'
  elementTypeClass = 'org.intellij.plugins.hil.HILElementType'
  parserClass = 'org.intellij.plugins.hil.HILParser'
  parserUtilClass = 'org.intellij.plugins.hil.psi.HILParserUtil'
  psiVisitorName = 'ILGeneratedVisitor'
  psiImplUtilClass = 'org.intellij.plugins.hil.psi.impl.HILPsiImplUtilJ'

  implements = 'org.intellij.plugins.hil.psi.ILExpression'
  extends = 'org.intellij.plugins.hil.psi.impl.ILExpressionBase'

  psiPackage = 'org.intellij.plugins.hil.psi'
  psiImplPackage = 'org.intellij.plugins.hil.psi.impl'

  extends("ILBinary.+Expression")=ILBinaryExpression

  extends(".*Expression|.*Variable|ILExpressionHolder")=ILExpression

  tokens = [
//    space = "regexp:\s+"
    INTERPOLATION_START='${'
    INTERPOLATION_END='}'
    L_PAREN='('
    R_PAREN=')'
    L_BRACKET='['
    R_BRACKET=']'
    COMMA=','

    OP_DOT='.'

    // Operators
    OP_PLUS='+'
    OP_MINUS='-'
    OP_MUL='*'
    OP_DIV='/'
    OP_MOD='%'

    // Logic operators
    // Unary
    OP_NOT='!'
    // Binary
    OP_EQUAL='=='
    OP_NOT_EQUAL='!='
    OP_LESS='<'
    OP_GREATER='>'
    OP_LESS_OR_EQUAL='<='
    OP_GREATER_OR_EQUAL='>='
    OP_AND_AND='&&'
    OP_OR_OR='||'
    // Ternary condition
    OP_COLON=':'
    OP_QUEST='?'


    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"

    NUMBER='regexp:(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'

    TRUE='true'
    FALSE='false'
    NULL='null'

    ID="regexp:[a-zA-Z_][0-9a-zA-Z\-_*]*"
  ]

}

// This bnf based on SpringEL bnf. Thanks to IntelliJ team

private root ::= ILExpression

// Expressions
// Update HILElementType.IL_EXPRESSIONS on change
ILExpression ::=
    ILParenthesizedExpression
  | ILExpressionHolder

  | ILConditionalExpression

  | ILBinaryOrExpression
  | ILBinaryAndExpression

  | ILBinaryEqualityExpression
  | ILBinaryRelationalExpression

  | ILBinaryAdditionExpression
  | ILBinaryMultiplyExpression

  | ILMethodCallExpression
  | ILUnaryExpression
  | ILSelectExpression
  | ILIndexSelectExpression
  | ILVariable
  | ILLiteralExpression
{
  name="expression"
  implements="com.intellij.psi.templateLanguages.OuterLanguageElement"
  methods =[
  ]
}

ILExpressionHolder ::= '${' ILExpression '}'

ILParenthesizedExpression ::= '(' <<push 0>> ILExpression ')' <<pop>>

ILUnaryExpression ::= UnaryOp ILExpression
{
  methods = [
    operand="ILExpression"
    getOperationSign
  ]
}

ILConditionalExpression ::= ILExpression ('?' <<push 1>> ILExpression (':' ILExpression) <<pop>>)
{
  pin(".*")="'\?'|'\:'"
  methods=[
    condition="ILExpression[0]"
    then="ILExpression[1]"
    else="ILExpression[2]"
  ]
}

fake ILBinaryExpression ::= ILExpression+ {
  mixin="org.intellij.plugins.hil.psi.impl.ILBinaryExpressionMixin"
  methods = [
    ILExpression="" // Magic hack
    LOperand="ILExpression[0]"
    ROperand="ILExpression[1]"
    getOperationSign
  ]
}
ILBinaryRelationalExpression ::= ILExpression relationalOp ILExpression
ILBinaryEqualityExpression ::= ILExpression equalityOp ILExpression

ILBinaryAndExpression ::= ILExpression andOp ILExpression
ILBinaryOrExpression ::= ILExpression orOp ILExpression

ILBinaryAdditionExpression ::= ILExpression AddOp ILExpression
ILBinaryMultiplyExpression ::= ILExpression MulOp ILExpression
ILMethodCallExpression ::= ILExpression ILParameterList
{
  methods=[
    Callee="ILExpression"
    ParameterList="ILParameterList"
    getQualifier
    getMethod
  ]
}

ILLiteralExpression ::= literal /*| identifier*/ | number | 'true' | 'false' | 'null' {
  name="Literal"
  mixin="org.intellij.plugins.hil.psi.impl.ILExpressionWithReference"
  methods=[
    getType
    getUnquotedText
  ]
}

ILParameterList ::= '(' (ILExpression? (',' ILExpression )* )?')' {
  pin(".*")=1
  methods=[
    ILExpression=""
    Parameters="ILExpression"
  ]
}

ILSelectExpression ::= ILExpression OP_DOT ILVariable {
  methods=[
    ILExpression=""
    from="ILExpression[0]"
    field="ILExpression[1 ]"
  ]
}

ILIndexSelectExpression ::= ILExpression ('[' ILExpression ']') {
  pin(".*")="'\['"
  extends = ILSelectExpression
}

ILVariable ::= identifier | '*' {
  name="Identifier"
  implements="com.intellij.psi.PsiNamedElement"
  mixin="org.intellij.plugins.hil.psi.impl.ILVariableMixin"
}

// Operators
private MulOp ::= OP_MUL | OP_DIV | OP_MOD
{
  name="operator"
}
private AddOp ::= OP_PLUS | OP_MINUS
{
  name="operator"
}
private UnaryOp ::= AddOp | OP_NOT //Not sure whether unary plus should be supported
{
  name="operator"
}
private orOp ::= OP_OR_OR
{
  name="operator"
}
private andOp ::= OP_AND_AND
{
  name="operator"
}
private equalityOp ::= OP_EQUAL
                    | OP_NOT_EQUAL
{
  name="operator"
}
private relationalOp ::= OP_LESS
                       | OP_GREATER
                       | OP_LESS_OR_EQUAL
                       | OP_GREATER_OR_EQUAL
{
  name="operator"
}
private ConditionOp ::=
    orOp
  | andOp
  | equalityOp
  | relationalOp
{
  name="operator"
}

// Primitives
private literal ::= DOUBLE_QUOTED_STRING
private identifier ::= ID
private number ::= NUMBER
